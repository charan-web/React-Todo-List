{"version":3,"sources":["logo.svg","Components/Form.jsx","Components/ListItems.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","handleChange","input","handleClick","className","type","onChange","value","onClick","ListItem","items","setItem","list","map","item","key","completed","inv","filterItems","filter","handleLi","checkItem","console","log","handleCheck","App","useState","setInput","e","inputValue","target","preventDefault","itemObj","Date","now","ListItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,gHCW5BC,G,YATF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,YAClC,OACE,0BAAMC,UAAU,QACd,2BAAOC,KAAK,OAAOC,SAAUL,EAAcM,MAAOL,IAClD,4BAAQM,QAASL,GAAjB,U,OCoDSM,EAvDE,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,QAqCjBC,EAAMF,EAAMG,KAAI,SAAAC,GACpB,OACE,yBAAKC,IAAKD,EAAKC,IAAKX,UAAU,UAC9B,wBAAIA,UAAS,aAAQU,EAAKE,UAAW,SAAS,IAAQD,IAAKD,EAAKC,KAAOD,EAAKG,KAC5E,yBAAKb,UAAU,OACf,4BAAQA,UAAU,YAAWI,QAAS,kBAxC3B,SAACO,GAGhB,IAAMG,EAAcR,EAAMS,QAAO,SAAAL,GAAI,OAAEA,EAAKC,MAAMA,KAClDJ,EAAQO,GAoCsCE,CAASN,EAAKC,OAAxD,OACA,4BAAQX,UAAU,WAAYI,QAAS,kBAlC3B,SAACO,GAClB,IAAMM,EAAYX,EAAMG,KAAI,SAAAC,GAC1B,OAAGA,EAAKC,MAAMA,EACZ,2BACKD,GADL,IACUE,WAAWF,EAAKE,YAIpBF,KAINH,EAAQU,GAERC,QAAQC,IAAIF,GAoBgCG,CAAYV,EAAKC,OAA5D,cAKJ,OACE,yBAAKX,UAAU,QACdQ,ICZUa,MA7Bf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACNxB,EADM,KACAyB,EADA,OAESD,mBAAS,IAFlB,mBAENZ,EAFM,KAEDH,EAFC,KAqBb,OACE,yBAAKP,UAAU,kBACd,kBAAC,EAAD,CAAMH,aApBW,SAAC2B,GACnB,IAAMC,EAAWD,EAAEE,OAAOvB,MAC1BoB,EAASE,IAkB4B3B,MAAOA,EAAOC,YAhBpC,SAACyB,GAEjB,GADAA,EAAEG,iBACS,KAAR7B,EAAW,CACd,IAAM8B,EAAU,CACdf,IAAIf,EACJc,WAAU,EACVD,IAAIkB,KAAKC,OAEXvB,EAAQ,GAAD,mBAAKG,GAAL,CAAUkB,KACjBL,EAAS,IAETL,QAAQC,IAAIT,KAKoEV,UAAU,SACxF,kBAAC+B,EAAD,CAAWzB,MAAOI,EAAOH,QAASA,MCxBnByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.e68ca704.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst Form = ({ handleChange, input,handleClick }) => {\r\n  return (\r\n    <form className=\"form\">\r\n      <input type=\"text\" onChange={handleChange} value={input} />\r\n      <button onClick={handleClick}>ADD</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\"\r\n\r\n\r\nconst ListItem = ({items,setItem}) => {\r\n\r\n  const handleLi=(key)=>{\r\n  \r\n  \r\n  const filterItems = items.filter(item=>item.key!==key) \r\n  setItem(filterItems)\r\n   \r\n}\r\nconst handleCheck=(key)=>{\r\n const checkItem = items.map(item=>{\r\n   if(item.key===key){\r\n     return{\r\n       ...item,completed:!item.completed\r\n     }\r\n    \r\n    }\r\n    return item\r\n  }\r\n    \r\n    )\r\n     setItem(checkItem)\r\n    //  console.log(checkItem)\r\n     console.log(checkItem)\r\n    \r\n        \r\n          \r\n\r\n        \r\n\r\n     \r\n    // console.log(items[0].completed)\r\n}\r\n\r\n\r\n\r\n\r\n  const list= items.map(item=>{\r\n    return(\r\n      <div key={item.key} className=\"border\">\r\n      <li className={`li ${item.completed? \"active\":\"\"}`}   key={item.key} >{item.inv}</li>\r\n      <div className=\"btn\">\r\n      <button className=\"delbutton\"onClick={()=>handleLi(item.key)}>DEL</button>\r\n      <button className=\"checkbtn\"  onClick={()=>handleCheck(item.key)} >Check</button>\r\n      </div></div>\r\n    )}\r\n    )\r\n    \r\n  return ( \r\n    <div className=\"item\">\r\n    {list}\r\n    </div>\r\n   );\r\n  }\r\n  \r\nexport default ListItem;\r\n\r\n\r\n      ","import React,{useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './Components/Form'\n\nimport ListItems from './Components/ListItems'\n\n\n\n\n\n\nfunction App() {\n  const [input,setInput]=useState(\"\")\n  const [item,setItem] =useState([])\n   const handleChange=(e)=>{\n    const inputValue=e.target.value;\n    setInput(inputValue)\n }\n const handleClick=(e)=>{\n   e.preventDefault()\n   if(input!==\"\"){\n   const itemObj = {\n     inv:input,\n     completed:false,\n     key:Date.now()\n   }\n   setItem([...item,itemObj]);\n   setInput('')\n  \n   console.log(item) \n  }}\n  \n  return (\n    <div className=\"main-container\"  >\n     <Form handleChange={handleChange}   input={input} handleClick={handleClick}   className=\"form\" />\n     <ListItems items={item}  setItem={setItem}   />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}